//! #![doc = include_str!("../README.md")]

mod grpc_clients;

/// Module autogenerated from grpc.proto
pub mod grpc {
    #![allow(unused_qualifications, missing_docs)]
    include!("grpc.rs");
}

/// REST API handlers
mod rest_api;

/// Redis servers
mod cache;

use axum::{extract::Extension, routing, Router};
use cache::RedisPool;
use clap::Parser;
use grpc::svc_telemetry_rpc_server::{SvcTelemetryRpc, SvcTelemetryRpcServer};
use grpc::{QueryIsReady, ReadyResponse};
use grpc_clients::GrpcClients;
use log::{error, info, warn};
use tonic::{transport::Server, Request, Response, Status};
use utoipa::OpenApi;

/// Mavlink entries in the cache will expire after 5 seconds
const CACHE_EXPIRE_MS_MAVLINK_ADSB: u32 = 5000;

/// Mavlink entries in the cache will expire after 10 seconds
const CACHE_EXPIRE_MS_AIRCRAFT_ADSB: u32 = 10000;

#[derive(Parser, Debug)]
struct Cli {
    /// Target file to write the OpenAPI Spec
    #[arg(long)]
    openapi: Option<String>,
}

#[derive(OpenApi)]
#[openapi(
    paths(
        rest_api::mavlink_adsb,
    ),
    tags(
        (name = "svc-telemetry", description = "svc-telemetry REST API.")
    )
)]
struct ApiDoc;

///Implementation of gRPC endpoints
#[derive(Debug, Default, Copy, Clone)]
pub struct SvcTelemetryImpl {}

#[tonic::async_trait]
impl SvcTelemetryRpc for SvcTelemetryImpl {
    /// Returns true when service is available
    #[cfg(not(tarpaulin_include))]
    async fn is_ready(
        &self,
        _request: Request<QueryIsReady>,
    ) -> Result<Response<ReadyResponse>, Status> {
        let response = ReadyResponse { ready: true };
        Ok(Response::new(response))
    }
}

/// Tokio signal handler that will wait for a user to press CTRL+C.
/// We use this in our hyper `Server` method `with_graceful_shutdown`.
///
/// # Examples
///
/// ```
/// Server::bind(&"0.0.0.0:8000".parse().unwrap())
/// .serve(app.into_make_service())
/// .with_graceful_shutdown(shutdown_signal())
/// .await
/// .unwrap();
/// ```
async fn shutdown_signal(server: &str) {
    tokio::signal::ctrl_c()
        .await
        .expect("expect tokio signal ctrl-c.");
    warn!("({}) shutdown signal.", server);
}

/// Starts the grpc server for this microservice
#[cfg(not(tarpaulin_include))]
async fn grpc_server() -> Result<(), ()> {
    info!("(grpc_server) entry.");

    // GRPC Server
    let grpc_port = std::env::var("DOCKER_PORT_GRPC")
        .unwrap_or_else(|_| "50051".to_string())
        .parse::<u16>()
        .unwrap_or(50051);

    let addr = format!("[::]:{}", grpc_port);
    let Ok(full_grpc_addr) = addr.parse() else {
        error!("(grpc_server) invalid address: {:?}, exiting.", addr);
        return Err(());
    };

    let imp = SvcTelemetryImpl::default();
    let (mut health_reporter, health_service) = tonic_health::server::health_reporter();
    health_reporter
        .set_serving::<SvcTelemetryRpcServer<SvcTelemetryImpl>>()
        .await;

    //start server
    info!("(grpc) hosted at {}.", full_grpc_addr);
    let _ = Server::builder()
        .add_service(health_service)
        .add_service(SvcTelemetryRpcServer::new(imp))
        .serve(full_grpc_addr)
        .await;

    Ok(())
}

/// Starts the REST API server for this microservice
#[cfg(not(tarpaulin_include))]
pub async fn rest_server(
    grpc_clients: GrpcClients,
    mavlink_cache: RedisPool,
    adsb_cache: RedisPool,
) -> Result<(), ()> {
    info!("(rest_server) entry.");

    let rest_port = std::env::var("DOCKER_PORT_REST")
        .unwrap_or_else(|_| "8000".to_string())
        .parse::<u16>()
        .unwrap_or(8000);

    let app = Router::new()
        .route("/health", routing::get(rest_api::health_check))
        .route(
            "/telemetry/mavlink/adsb",
            routing::post(rest_api::mavlink_adsb),
        )
        .route("/telemetry/aircraft/adsb", routing::post(rest_api::adsb))
        .layer(Extension(mavlink_cache))
        .layer(Extension(adsb_cache))
        .layer(Extension(grpc_clients));

    let address = format!("[::]:{rest_port}");
    let Ok(address) = address.parse() else {
        error!("(rest_server) invalid address: {:?}, exiting.", address);
        return Err(());
    };

    info!("(rest_server) hosted at {:?}.", address);
    let _ = axum::Server::bind(&address)
        .serve(app.into_make_service())
        .with_graceful_shutdown(shutdown_signal("rest"))
        .await;

    Ok(())
}

/// Create OpenAPI3 Specification File
fn generate_openapi_spec(target: &str) -> Result<(), Box<dyn std::error::Error>> {
    let output = ApiDoc::openapi()
        .to_pretty_json()
        .expect("(ERROR) unable to write openapi specification to json.");

    std::fs::write(target, output).expect("(ERROR) unable to write json string to file.");

    Ok(())
}

#[cfg(not(tarpaulin_include))]
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Allow option to only generate the spec file to a given location
    // use `make rust-openapi` to generate the OpenAPI specification
    let args = Cli::parse();
    if let Some(target) = args.openapi {
        return generate_openapi_spec(&target);
    }

    // Start Logger
    let log_cfg: &str = "log4rs.yaml";
    if let Err(e) = log4rs::init_file(log_cfg, Default::default()) {
        error!("(logger) could not parse {}: {}.", log_cfg, e);
        panic!();
    }

    // Start GRPC Server
    tokio::spawn(grpc_server());

    // Start REST API
    let _ = rest_server(
        GrpcClients::default(),
        // Mavlink cache
        RedisPool::new(CACHE_EXPIRE_MS_MAVLINK_ADSB)
            .await
            .expect("Could not start redis server."),
        // Standard aircraft ADS-B cache
        RedisPool::new(CACHE_EXPIRE_MS_AIRCRAFT_ADSB)
            .await
            .expect("Could not start redis server."),
    )
    .await;

    info!("Successful shutdown.");
    Ok(())
}
