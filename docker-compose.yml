---
version: '3.6'
volumes:
  redis-data:
  rabbitmq-data:

services:
  redis:
    container_name: svc-telemetry-redis
    image: redis:6.2-alpine
    restart: always
    command: redis-server --save 20 1 --loglevel warning
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 2s
      timeout: 1s
      retries: 3
    volumes:
      - redis-data:/data
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
      - ALLOW_EMPTY_PASSWORD=yes

  rabbitmq:
    container_name: arrow-rabbitmq
    image: rabbitmq:3.11-alpine
    restart: always
    ports:
      - 5672:5672
    command: rabbitmq-server
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics","ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - rabbitmq-data:/data
    environment:
      - RABBITMQ_NODENAME

  web-server:
    container_name: ${DOCKER_NAME}-example-server
    image: ${PACKAGE_NAME}:latest
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    links:
      - redis
      - rabbitmq
    volumes:
      - type: bind
        source: log4rs.yaml
        target: ${LOG_CONFIG}
    ports:
      - ${HOST_PORT_REST}:${DOCKER_PORT_REST}
      - ${HOST_PORT_GRPC}:${DOCKER_PORT_GRPC}
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr", "localhost:${DOCKER_PORT_GRPC}"]
      interval: 2s
      timeout: 1s
      retries: 3
    environment:
      - REDIS__URL
      - REDIS__POOL__MAX_SIZE
      - STORAGE_HOST_GRPC
      - STORAGE_PORT_GRPC
      - RABBITMQ_NODENAME
      - DOCKER_PORT_REST
      - DOCKER_PORT_GRPC
      - LOG_CONFIG

  example:
    links:
      - web-server
    depends_on:
      web-server:
        condition: service_healthy
    container_name: ${DOCKER_NAME}-example
    image: ${RUST_IMAGE_NAME}:${RUST_IMAGE_TAG}
    volumes:
      - type: bind
        source: "${SOURCE_PATH}/"
        target: "/usr/src/app"
      - type: bind
        source: "${SOURCE_PATH}/.cargo/registry"
        target: "/usr/local/cargo/registry"
    environment:
      - SERVER_HOSTNAME
      - SERVER_PORT_GRPC
      - SERVER_PORT_REST
      - EXAMPLE_TARGET
    command: cargo run --manifest-path "${CARGO_MANIFEST_PATH}" --example "${EXAMPLE_TARGET}"
